{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for logging and auth (if needed)\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  console.log(`API Response: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3;\n  console.error('API Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n\n  // Handle specific error cases\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n    console.warn('Resource not found:', error.config.url);\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) >= 500) {\n    console.error('Server error:', error.response.data);\n  }\n  return Promise.reject(error);\n});\n\n// Overlay API functions\nexport const overlayAPI = {\n  // Get all overlays\n  getAll: async (params = {}) => {\n    const response = await api.get('/overlays', {\n      params\n    });\n    return response.data;\n  },\n  // Get single overlay\n  getById: async id => {\n    const response = await api.get(`/overlays/${id}`);\n    return response.data;\n  },\n  // Create new overlay\n  create: async overlayData => {\n    const response = await api.post('/overlays', overlayData);\n    return response.data;\n  },\n  // Update overlay\n  update: async (id, updateData) => {\n    const response = await api.put(`/overlays/${id}`, updateData);\n    return response.data;\n  },\n  // Delete overlay\n  delete: async id => {\n    const response = await api.delete(`/overlays/${id}`);\n    return response.data;\n  },\n  // Batch update overlays\n  batchUpdate: async updates => {\n    const promises = updates.map(({\n      id,\n      data\n    }) => api.put(`/overlays/${id}`, data));\n    const responses = await Promise.allSettled(promises);\n    return responses;\n  },\n  // Get overlay statistics\n  getStats: async () => {\n    const response = await api.get('/overlays/stats');\n    return response.data;\n  }\n};\n\n// Stream API functions\nexport const streamAPI = {\n  // Start stream\n  start: async rtspUrl => {\n    const response = await api.post('/stream/start', {\n      rtsp_url: rtspUrl\n    });\n    return response.data;\n  },\n  // Stop stream\n  stop: async () => {\n    const response = await api.post('/stream/stop');\n    return response.data;\n  },\n  // Get stream status\n  getStatus: async () => {\n    const response = await api.get('/stream/status');\n    return response.data;\n  },\n  // Validate RTSP URL\n  validate: async rtspUrl => {\n    const response = await api.post('/stream/validate', {\n      rtsp_url: rtspUrl\n    });\n    return response.data;\n  }\n};\n\n// Health check API\nexport const healthAPI = {\n  // Get API health status\n  check: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\n\n// Utility functions\nexport const apiUtils = {\n  // Test API connectivity\n  testConnection: async () => {\n    try {\n      await healthAPI.check();\n      return {\n        success: true,\n        message: 'API connection successful'\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        success: false,\n        message: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'API connection failed'\n      };\n    }\n  },\n  // Handle API errors consistently\n  handleError: (error, defaultMessage = 'An error occurred') => {\n    var _error$response5, _error$response5$data;\n    if ((_error$response5 = error.response) !== null && _error$response5 !== void 0 && (_error$response5$data = _error$response5.data) !== null && _error$response5$data !== void 0 && _error$response5$data.error) {\n      return error.response.data.error;\n    } else if (error.message) {\n      return error.message;\n    } else {\n      return defaultMessage;\n    }\n  },\n  // Retry failed requests\n  retry: async (apiCall, maxRetries = 3, delay = 1000) => {\n    let lastError;\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        return await apiCall();\n      } catch (error) {\n        var _error$response6, _error$response7;\n        lastError = error;\n\n        // Don't retry 4xx errors (client errors)\n        if (((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) >= 400 && ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status) < 500) {\n          throw error;\n        }\n\n        // Wait before retrying\n        if (i < maxRetries - 1) {\n          await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));\n        }\n      }\n    }\n    throw lastError;\n  }\n};\n\n// Export default API instance\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","_error$response2","_error$response3","data","message","warn","overlayAPI","getAll","params","get","getById","id","overlayData","post","update","updateData","put","delete","batchUpdate","updates","promises","map","responses","allSettled","getStats","streamAPI","start","rtspUrl","rtsp_url","stop","getStatus","validate","healthAPI","check","apiUtils","testConnection","success","_error$response4","_error$response4$data","handleError","defaultMessage","_error$response5","_error$response5$data","retry","apiCall","maxRetries","delay","lastError","i","_error$response6","_error$response7","resolve","setTimeout"],"sources":["C:/Users/HP/OneDrive/Desktop/Livestream/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for logging and auth (if needed)\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`API Response: ${response.status} ${response.config.url}`);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Response Error:', error.response?.data || error.message);\r\n    \r\n    // Handle specific error cases\r\n    if (error.response?.status === 404) {\r\n      console.warn('Resource not found:', error.config.url);\r\n    } else if (error.response?.status >= 500) {\r\n      console.error('Server error:', error.response.data);\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Overlay API functions\r\nexport const overlayAPI = {\r\n  // Get all overlays\r\n  getAll: async (params = {}) => {\r\n    const response = await api.get('/overlays', { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get single overlay\r\n  getById: async (id) => {\r\n    const response = await api.get(`/overlays/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create new overlay\r\n  create: async (overlayData) => {\r\n    const response = await api.post('/overlays', overlayData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update overlay\r\n  update: async (id, updateData) => {\r\n    const response = await api.put(`/overlays/${id}`, updateData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete overlay\r\n  delete: async (id) => {\r\n    const response = await api.delete(`/overlays/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Batch update overlays\r\n  batchUpdate: async (updates) => {\r\n    const promises = updates.map(({ id, data }) => api.put(`/overlays/${id}`, data));\r\n    const responses = await Promise.allSettled(promises);\r\n    return responses;\r\n  },\r\n\r\n  // Get overlay statistics\r\n  getStats: async () => {\r\n    const response = await api.get('/overlays/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Stream API functions\r\nexport const streamAPI = {\r\n  // Start stream\r\n  start: async (rtspUrl) => {\r\n    const response = await api.post('/stream/start', { rtsp_url: rtspUrl });\r\n    return response.data;\r\n  },\r\n\r\n  // Stop stream\r\n  stop: async () => {\r\n    const response = await api.post('/stream/stop');\r\n    return response.data;\r\n  },\r\n\r\n  // Get stream status\r\n  getStatus: async () => {\r\n    const response = await api.get('/stream/status');\r\n    return response.data;\r\n  },\r\n\r\n  // Validate RTSP URL\r\n  validate: async (rtspUrl) => {\r\n    const response = await api.post('/stream/validate', { rtsp_url: rtspUrl });\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Health check API\r\nexport const healthAPI = {\r\n  // Get API health status\r\n  check: async () => {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Utility functions\r\nexport const apiUtils = {\r\n  // Test API connectivity\r\n  testConnection: async () => {\r\n    try {\r\n      await healthAPI.check();\r\n      return { success: true, message: 'API connection successful' };\r\n    } catch (error) {\r\n      return { \r\n        success: false, \r\n        message: error.response?.data?.error || 'API connection failed' \r\n      };\r\n    }\r\n  },\r\n\r\n  // Handle API errors consistently\r\n  handleError: (error, defaultMessage = 'An error occurred') => {\r\n    if (error.response?.data?.error) {\r\n      return error.response.data.error;\r\n    } else if (error.message) {\r\n      return error.message;\r\n    } else {\r\n      return defaultMessage;\r\n    }\r\n  },\r\n\r\n  // Retry failed requests\r\n  retry: async (apiCall, maxRetries = 3, delay = 1000) => {\r\n    let lastError;\r\n    \r\n    for (let i = 0; i < maxRetries; i++) {\r\n      try {\r\n        return await apiCall();\r\n      } catch (error) {\r\n        lastError = error;\r\n        \r\n        // Don't retry 4xx errors (client errors)\r\n        if (error.response?.status >= 400 && error.response?.status < 500) {\r\n          throw error;\r\n        }\r\n        \r\n        // Wait before retrying\r\n        if (i < maxRetries - 1) {\r\n          await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));\r\n        }\r\n      }\r\n    }\r\n    \r\n    throw lastError;\r\n  }\r\n};\r\n\r\n// Export default API instance\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}